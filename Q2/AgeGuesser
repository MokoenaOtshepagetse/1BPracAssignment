import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

/*
The main class for the Age Guessing game.
It extends the GuessingGame class, inheriting its core logic.
This class handles all user interaction and movie-specific game logic.
 */
public class AgeGuesser extends GuessingGame {

    private ArrayList<Movie> availableMovies; // Movies to be asked about
    private ArrayList<Movie> moviesSeen; // Movies the user has seen
    private ArrayList<Movie> moviesNotSeen; // Movies the user has not seen
    private int currentYear;

    // Constructor for AgeGuesser.
    // It calls the parent constructor and initializes all the game-specific data structures.
    public AgeGuesser() {
        super();
        // Initialize the available movies list from the separate MovieData class
        this.availableMovies = MovieData.initializeMovies(); 
        this.moviesSeen = new ArrayList<>();
        this.moviesNotSeen = new ArrayList<>();
        this.currentYear = java.time.Year.now().getValue();
    }

    // The main game loop.
    // This method handles all the user interaction and calls the appropriate methods based on user input.

    public void startGame() {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        boolean ageGuessed = false;
        int questionsAsked = 0;

        System.out.println("Welcome to the Age Guesser!");
        System.out.println("I'll try to guess your age based on movies you've seen. ðŸ¤”");

        while (!ageGuessed) {
            // Check if we've reached the 20-movie threshold for the first guess
            if (questionsAsked >= 20) {
                System.out.println("\nI think I have enough information! Let's make a guess.");
                ageGuessed = makeAGuess(scanner);
                if (ageGuessed) break;
                // After the first guess, reset the questions asked for the smaller loop
                questionsAsked = 0;
            }

            int numQuestions = 0;
            // After the initial 20 questions, revert to the random 1-3 loop
            if (questionsAsked == 0) {
                numQuestions = random.nextInt(3) + 1;
            } else {
                numQuestions = 1; // Only ask one question at a time if still in initial phase
            }

            for (int i = 0; i < numQuestions; i++) {
                if (availableMovies.isEmpty()) {
                    System.out.println("I've run out of movies to ask about! Let's make a final guess. ðŸŽ¬");
                    ageGuessed = makeAGuess(scanner);
                    if (ageGuessed) {
                        break;
                    }
                }
                
                // Pick a random movie from the available list.
                Movie movie = availableMovies.get(random.nextInt(availableMovies.size()));
                System.out.printf("\nHave you seen '%s'? (y/n)\n", movie.getTitle());
                String answer = scanner.nextLine().trim().toLowerCase();

                // Process the 'yes' or 'no' answer.
                if (answer.equals("y")) {
                    int requiredAge = currentYear - movie.getReleaseYear();
                    adjustRange(requiredAge, this.maxAge);
                    moviesSeen.add(movie);
                    availableMovies.remove(movie); // Remove the movie from the pool to avoid repeats.
                } else if (answer.equals("n")) {
                    int requiredAge = currentYear - movie.getReleaseYear();
                    adjustRange(this.minAge, requiredAge - 1);
                    moviesNotSeen.add(movie);
                    availableMovies.remove(movie);
                } else {
                    System.out.println("Please answer 'y' or 'n'. Let's try that question again. ðŸ˜…");
                    i--; // Decrement counter to re-ask the same question.
                }
                questionsAsked++;
            }
        }
        scanner.close();
    }

    /**
     This method contains the logic for making a guess and handling the user's response.
     @param scanner The Scanner object for user input.
     @return true if the age was guessed or the game ended, false otherwise.
     */
    private boolean makeAGuess(Scanner scanner) {
        incrementGuesses();
        int guessedAge = makeGuess();
        System.out.printf("\nMy guess is... are you %d years old? (y/n)\n", guessedAge);
        String guessAnswer = scanner.nextLine().trim().toLowerCase();

        if (guessAnswer.equals("y")) {
            System.out.println("\nAwesome! I got it right! ðŸŽ‰");
            generateReport();
            return true;
        } else {
            System.out.println("Too bad! Was my guess too high or too low? (high/low)");
            String highLowAnswer = scanner.nextLine().trim().toLowerCase();

            if (highLowAnswer.equals("high")) {
                adjustRange(this.minAge, guessedAge - 1);
            } else if (highLowAnswer.equals("low")) {
                adjustRange(guessedAge + 1, this.maxAge);
            } else {
                System.out.println("Please answer 'high' or 'low'. Let's try again. ðŸ˜•");
            }
            // Check for a contradiction in answers.
            if (minAge > maxAge) {
                System.out.println("\nHmm, it seems there's a contradiction in your answers. Let's start over. ðŸ˜²");
                return true;
            }
            return false;
        }
    }

    // Generates and prints the final report after the age is guessed.
    // This method demonstrates retrieving and displaying data.
    private void generateReport() {
        System.out.println("\n--- Report ---");
        System.out.printf("Total Guesses: %d\n", getNumGuesses());
        System.out.println("Movies Seen: ");
        if (moviesSeen.isEmpty()) {
            System.out.println("  None");
        } else {
            for (Movie movie : moviesSeen) {
                System.out.printf("  - %s (Released: %d)\n", movie.getTitle(), movie.getReleaseYear());
            }
        }
        System.out.println("\nMovies Not Seen: ");
        if (moviesNotSeen.isEmpty()) {
            System.out.println("  None");
        } else {
            for (Movie movie : moviesNotSeen) {
                System.out.printf("  - %s (Released: %d)\n", movie.getTitle(), movie.getReleaseYear());
            }
        }
    }

    // The main method and the entry point of the program.
    // This method now handles the "play again" or "exit" loop.
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;

        while (playAgain) {
            AgeGuesser game = new AgeGuesser();
            game.startGame();

            System.out.println("\nWould you like to play again? (y/n)");
            String answer = scanner.nextLine().trim().toLowerCase();

            if (answer.equals("n")) {
                playAgain = false;
                System.out.println("Thanks for playing! Goodbye. ðŸ‘‹");
            } else if (!answer.equals("y")) {
                System.out.println("Invalid input. Exiting game. ðŸ‘‹");
                playAgain = false;
            }
        }
        scanner.close();
    }
}